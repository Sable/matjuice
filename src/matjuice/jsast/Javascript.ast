/*
 *  Copyright 2014-2015, Vincent Foley-Bourgon, McGill University
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

Program    ::= Function:Function*;
Function   ::= <FunctionName:String> Param:Identifier* Decl:Identifier* Stmts:StmtSequence;
Identifier ::= <Id:String>;


abstract Stmt;
StmtAssign:Stmt   ::= <Lhs:String> Rhs:Expr;                                            // lhs = rhs;
StmtGet:Stmt      ::= <Lhs:String> <Rhs:String> Index:Expr;                             // lhs = rhs[expr];
StmtSet:Stmt      ::= <Lhs:String> Index:Expr <Rhs:String>;                             // lhs[expr] = rhs;
StmtUnop:Stmt     ::= <Lhs:String> <Op:matjuice.jsast.Unop> Rhs:Expr;                   // lhs = op rhs;
StmtBinop:Stmt    ::= <Lhs:String> <Op:matjuice.jsast.Binop> Rhs1:Expr Rhs2:Expr;       // lhs = rhs1 op rhs2;
StmtCall:Stmt     ::= [Lhs:Identifier] <Function:String> Argument:Expr*;                // lhs = function(arg1, arg2, ..., argk);
StmtMethod:Stmt   ::= [Lhs:Identifier] <Function:String> Receiver:Expr Argument:Expr*;  // lhs = receiver.method(arg1, arg2, ..., argk);
StmtIf:Stmt       ::= <Condition:String> ThenStmts:StmtSequence ElseStmts:StmtSequence; // if (condition) { thenStmts } else { elseStmts }
StmtWhile:Stmt    ::= Condition:Expr BodyStmts:StmtSequence;                            // while (condition) { bodyStmts }
StmtFor:Stmt      ::= <Var:String> Start:Expr End:Expr Step:Expr
                      <ComparisonOp:matjuice.jsast.Binop> <UpdateOp:matjuice.jsast.Binop>
                      BodyStmts:StmtSequence;                                           // for (Var=Start; Var Comparison End; Var = Var UpdateOp Step) {...}
StmtReturn:Stmt   ::= Return:Identifier*;                                               // return [ret1, ret2, ..., retk]
StmtBreak:Stmt;                                                                         // break;
StmtContinue:Stmt;                                                                      // continue;
StmtSequence:Stmt ::= Stmt:Stmt*;                                                       // Multiple statements to allow for one Tamer statement to generate multiple JS statements.
StmtNull:Stmt ;

abstract Expr;
ExprInt:Expr      ::= <Value:Integer>; // 3
ExprFloat:Expr    ::= <Value:Double>;  // 3.141592
ExprId:Expr       ::= <Value:String>;  // id
ExprString:Expr   ::= <Value:String>;  // "Hello"
ExprList:Expr     ::= Value:Expr*;     // ["hello", [3, 0.1415], id]
ExprOp:Expr       ::= <Op:matjuice.jsast.Binop> Lhs:Expr Rhs:Expr;
ExprAny:Expr      ::= <Expr:String>;
