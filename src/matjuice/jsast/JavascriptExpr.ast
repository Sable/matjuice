/*
 *  Copyright 2014-2015, Vincent Foley-Bourgon, McGill University
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

Program              ::= Function:Function*;
Function             ::= <FunctionName:String> Param:Identifier* Decl:Identifier* Stmt:Stmt*;
Identifier           ::= <Id:String>;

abstract Stmt;
StmtAssign: Stmt     ::= <Id: String> Expr:Expr;
StmtSet: Stmt        ::= <Array: String> Index:Expr Expr:Expr;
StmtWhile: Stmt      ::= Condition:Expr Stmt:Stmt*;
StmtFor: Stmt        ::= <Id: String> Start:Expr Step:Expr Stop:Expr
                         <ComparisonOp: matjuice.jsast.Binop>
                         <UpdateOp: matjuice.jsast.Binop>
                         Stmt:Stmt*;
StmtIf: Stmt         ::= Expr:Expr ThenStmt:Stmt* ElseStmt:Stmt*;
StmtContinue: Stmt;
StmtBreak: Stmt;

abstract Expr;
ExprId: Expr         ::= <Id: String>;
ExprInt: Expr        ::= <Int: Integer>;
ExprDouble: Expr     ::= <Double: Double>;
ExprString: Expr     ::= <String: String>;
ExprArray: Expr      ::= Expr:Expr*;
ExprLambda: Expr     ::= Arg:Identifier* Stmt:Stmt*;
ExprCall: Expr       ::= <Function: String> Arg:Expr*;
ExprMethodCall: Expr ::= <Receiver: String> <Method: String> Arg:Expr*;
ExprBinop: Expr      ::= <Op: matjuice.jsast.Binop> Expr1:Expr Expr2:Expr;
ExprUnop: Expr       ::= <Op: matjuice.jsast.Unop> Expr:Expr;
ExprGet: Expr        ::= <Array: String> Index:Expr;
